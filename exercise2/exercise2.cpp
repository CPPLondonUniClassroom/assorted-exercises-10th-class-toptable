//
// Created by Tristan Brindle on 24/10/2017.
//
#include <cmath>
#include "exercise2.hpp"

char shift_uppercase_char_by(char c, int offset)
{
    if(c >= 'A' && c <= 'Z') {
      auto val = c - 'A'; // character value
      auto val_added = (val + (int)std::abs(offset)) % 26; /*
                                             * A = 0, Z=25
                                             * anything over Z goes back to A
                                             * also anything under A should
                                             * likewise wrap
                                             */
      c = 'A' + val_added; // 0 becomes A, 26 becomes Z
    }
    return c;
}

// Requirements:
//   -- given an uppercase character A-Z, shifts that character by 13 places
//   -- spaces, numbers and punctuation should not be changed
char shift_char(char c)
{
    return shift_uppercase_char_by(c, 13);
}

// Requirements:
//   -- given a string consisting of uppercase characters and punctuation,
//      returns a new string with each character shifted by 13 places
//   -- spaces, numbers and punctuation should not be changed
std::string rot13(std::string str)
{
    for(char& c : str) {
        c = shift_char(c);
    }
    return str;
}

// Requirements:
//   -- given a string consisting of uppercase characters and punctuation,
//      returns a new string with each character shifted by n places
std::string encode(std::string str, int n)
{
    for(char& c : str) {
        c = shift_uppercase_char_by(c, n);
    }
    return str;
}

// Requirements:
//   -- given a string generated by encode(str, n), returns the original string
std::string decode(std::string str, int n)
{
    for(char& c : str) {
        c = shift_uppercase_char_by(c, (int)std::abs(26-n));
    }
    return str;
}
